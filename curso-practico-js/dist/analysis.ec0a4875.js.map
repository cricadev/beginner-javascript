{"version":3,"sources":["salarios.js","analysis.js"],"names":["colombia","push","name","salary","salariosCol","map","e","salariosColSorted","sort","a","b","getMean","arr","reduce","length","getMedian","list","isEven","middleIndex","secondMiddleIndex","values","middleValue","Math","floor","getMedianSalaries","num","half","parseFloat","person1","person2","median","middlePerson","generalMedianCol","console","log","spliceStart","parseInt","spliceCount","median10Percent","slice","medianTop10Col"],"mappings":"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","file":"analysis.ec0a4875.js","sourceRoot":"..","sourcesContent":["const colombia = [];\r\ncolombia.push({\r\n    name: \"Camila\",\r\n    salary: 500,\r\n});\r\ncolombia.push({\r\n    name: \"Nath\",\r\n    salary: 1500,\r\n});\r\ncolombia.push({\r\n    name: \"Luisa\",\r\n    salary: 1800,\r\n});\r\ncolombia.push({\r\n    name: \"Laura\",\r\n    salary: 1000,\r\n});\r\ncolombia.push({\r\n    name: \"Daniela\",\r\n    salary: 2200,\r\n});\r\ncolombia.push({\r\n    name: \"Esperancita\",\r\n    salary: 200,\r\n});\r\ncolombia.push({\r\n    name: \"Carla\",\r\n    salary: 500,\r\n});\r\ncolombia.push({\r\n    name: \"Antonieta\",\r\n    salary: 1500,\r\n});\r\ncolombia.push({\r\n    name: \"Alicia\",\r\n    salary: 1300,\r\n});\r\ncolombia.push({\r\n    name: \"Ana\",\r\n    salary: 2400,\r\n});\r\ncolombia.push({\r\n    name: \"Julia\",\r\n    salary: 3400,\r\n});\r\ncolombia.push({\r\n    name: \"Rosa\",\r\n    salary: 400,\r\n});\r\ncolombia.push({\r\n    name: \"AngÃ©lica\",\r\n    salary: 400,\r\n});\r\ncolombia.push({\r\n    name: \"Tatiana\",\r\n    salary: 400,\r\n});\r\ncolombia.push({\r\n    name: \"Lorena\",\r\n    salary: 600,\r\n});\r\ncolombia.push({\r\n    name: \"Carolina\",\r\n    salary: 1600,\r\n});\r\ncolombia.push({\r\n    name: \"Fernanda\",\r\n    salary: 2600,\r\n});\r\ncolombia.push({\r\n    name: \"Nora\",\r\n    salary: 1000,\r\n});\r\ncolombia.push({\r\n    name: \"Gisselle\",\r\n    salary: 2000,\r\n});\r\ncolombia.push({\r\n    name: \"Bill Gates\",\r\n    salary: 100000000,\r\n});\r\nexport { colombia };","import { colombia } from './salarios.js';\r\nconst salariosCol = colombia.map((e) => e.salary);\r\nconst salariosColSorted = salariosCol.sort((a, b) => a - b);\r\n\r\n\r\n\r\n\r\nconst getMean = (arr) => arr.reduce((a, b) => a + b) / arr.length;\r\n\r\nfunction getMedian(list) {\r\n    list.sort((a, b) => a - b);\r\n    const isEven = () => list.length % 2 === 0;\r\n\r\n    if (isEven()) {\r\n        const middleIndex = list.length / 2;\r\n        const secondMiddleIndex = middleIndex - 1;\r\n        const values = [list[middleIndex], list[secondMiddleIndex]];\r\n        return getMean(values);\r\n    }\r\n    if (!isEven()) {\r\n        const middleValue = Math.floor(list.length / 2);\r\n        return list[middleValue];\r\n    }\r\n};\r\n\r\nfunction getMedianSalaries(list) {\r\n    const isEven = (num) => num % 2 === 0;\r\n    const half = parseFloat(list.length / 2);\r\n    if (isEven(list.length)) {\r\n        const person1 = list[half - 1];\r\n        const person2 = list[half];\r\n\r\n        const median = getMedian([person1, person2]);\r\n        return median;\r\n\r\n    } else {\r\n        const middlePerson = list[half];\r\n        return middlePerson;\r\n    }\r\n}\r\nconst generalMedianCol = getMedianSalaries(salariosColSorted);\r\nconsole.log({\r\n        generalMedianCol\r\n    },\r\n    // median10Percent,\r\n);\r\n\r\n// median top 10%\r\n\r\nconst spliceStart = parseInt(salariosColSorted.length * 90) / 100;\r\nconst spliceCount = salariosColSorted.length - spliceStart;\r\n\r\nconsole.log(spliceStart, spliceCount);\r\nconst median10Percent = salariosColSorted.slice(spliceStart, spliceCount);\r\nconsole.log(median10Percent);\r\nconst medianTop10Col = getMedianSalaries(median10Percent);\r\nconsole.log(salariosColSorted)\r\n\r\nconsole.log(medianTop10Col)"]}