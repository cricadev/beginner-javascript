{"id":"promises.html","dependencies":[{"name":"C:\\Users\\Cristian\\Desktop\\PLATZI\\repository-cricadev\\package.json","includedInParent":true,"mtime":1647367756628}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Promises</title>\r\n  </head>\r\n  <body></body>\r\n  <script>function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction makePizza() {\n  var toppings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  // const pizzaPromise = new Promise((resolve, reject) => {\n  return new Promise(function (resolve, reject) {\n    // reject if people try with pineapple\n    if (toppings.includes(\"pineapple\")) {\n      reject(new Error(\"No pineapple! :pineapple:\"));\n    }\n\n    var amountOfTimeToBake = 500 + toppings.length * 200; // wait 1 second for the pizza to cook:\n\n    setTimeout(function () {\n      resolve(\"Your pizza is ready with the toppings: \".concat(toppings.join(\" \")));\n    }, amountOfTimeToBake); // when you are ready, you can resolve this promise\n    // if something went wrong , we can reject this promise;\n  });\n} // makePizza([\"pepperoni\", \"pineapple\"])\n//   .then((pizza) => {\n//     console.log(pizza);\n//     return makePizza([\"ham\", \"cheese\"]);\n//   })\n//   .then((pizza) => {\n//     console.log(pizza);\n//     return makePizza([\n//       \"bacon\",\n//       \"sausage\",\n//       \"pepperoni\",\n//       \"pineapple\",\n//       \"ham\",\n//       \"cheese\",\n//     ]);\n//   })\n//   .then((pizza) => {\n//     console.log(pizza);\n//     return makePizza();\n//   })\n//   .then((pizza) => {\n//     console.log(pizza);\n//     return makePizza([\n//       \"bacon\",\n//       \"sausage\",\n//       \"pepperoni\",\n//       \"pineapple\",\n//       \"ham\",\n//       \"cheese\",\n//       \"beef\",\n//       \"chicken\",\n//       \"meat\",\n//       \"cheese\",\n//       \"onion\",\n//     ]);\n//   })\n//   .then((pizza) => {\n//     console.log(pizza);\n//   });\n// run them concurrently\n\n\nvar pizzaPromise1 = makePizza([\"pepperoni\", \"pineapple\", \"tomatoes\"]);\nvar pizzaPromise2 = makePizza([\"bacon\", \"sausage\", \"pepperoni\", \"pineapple\", \"ham\", \"cheese\", \"beef\", \"chicken\", \"meat\", \"cheese\", \"onion\"]);\nvar pizzaPromise3 = makePizza([\"pepperoni\", \"pineapple\", \"tomatoes\", \"ham\"]);\nvar dinnerPromise = Promise.all([pizzaPromise1, pizzaPromise2, pizzaPromise3]);\ndinnerPromise.then(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 3),\n      hottie = _ref2[0],\n      garbagePail = _ref2[1],\n      hamAndCheese = _ref2[2];\n\n  console.log(hottie, garbagePail, hamAndCheese);\n}).catch(handleError);\nvar firstPizzaPromise = Promise.race([pizzaPromise1, pizzaPromise2, pizzaPromise3]);\nfirstPizzaPromise.then(function (pizza) {\n  console.log(\"You must be hungry, here is the first one ready\");\n  console.log(pizza);\n}).catch(handleError);\n\nfunction handleError(err) {\n  console.log(\"oh no!\");\n  console.log(err);\n}\n\nvar p1 = makePizza([\"pep\"]);\nvar p2 = makePizza([\"pineapple\"]);\nvar dinnerPromise2 = Promise.allSettled([p1, p2]);\ndinnerPromise2.then(function (results) {\n  console.log(results);\n}); // const pepperoniPromise = makePizza([\"pepperoni\"]);\n// const canadianPromise = makePizza([\"Pepperoni\", \"mushrooms\", \"onions\"]);\n// console.log(pepperoniPromise, canadianPromise);\n// console.log(\"starting pizza\");\n// pepperoniPromise.then((pizza) => {\n//   console.log(\"ahh got it!\");\n//   console.log(pizza);\n// });\n// console.log(\"finished pizza\");</script>\r\n</html>\r\n"},"sourceMaps":null,"error":null,"hash":"7a4e1d8b1d100cbad1e3cad7d3a8bf78","cacheData":{"env":{}}}